
import ControlLayer.QuestionCtrl;
import ModelLayer.Answer;
import ModelLayer.Question;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayDeque;
import java.util.Random;
import java.util.ArrayList;
import javax.swing.JTextField;
import java.util.Iterator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/** Public class Game initialize the game menu
 *
 * @author viva
 */
public class Game extends javax.swing.JFrame {

    private QuestionCtrl questionCtrl;
    private StartMenu startMenu;
    private Random rand;
    private ArrayDeque<JTextField> fields;
    private Question quest;

    public Game() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionField = new javax.swing.JTextField();
        AnswerA = new javax.swing.JTextField();
        AnswerB = new javax.swing.JTextField();
        AnswerD = new javax.swing.JTextField();
        AnswerC = new javax.swing.JTextField();
        ButtonA = new javax.swing.JButton();
        ButtonB = new javax.swing.JButton();
        ButtonD = new javax.swing.JButton();
        ButtonC = new javax.swing.JButton();
        goBack = new javax.swing.JButton();
        newQuestion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);


        ButtonA.setText("A");
        ButtonA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAActionPerformed(evt);
            }
        });

        ButtonB.setText("B");
        ButtonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBActionPerformed(evt);
            }
        });

        ButtonD.setText("D");
        ButtonD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDActionPerformed(evt);
            }
        });

        ButtonC.setText("C");
        ButtonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCActionPerformed(evt);
            }
        });

        goBack.setText("Назад");
        goBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackActionPerformed(evt);
            }
        });

        newQuestion.setText("Нов въпрос");
        newQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newQuestionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(questionField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ButtonA, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                            .addComponent(ButtonC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AnswerC)
                            .addComponent(AnswerA))
                        .addGap(196, 196, 196)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ButtonB, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                            .addComponent(ButtonD, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AnswerB)
                            .addComponent(AnswerD)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(goBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(641, 641, 641)
                        .addComponent(newQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(161, 161, 161))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ButtonA, ButtonB});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(questionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AnswerA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnswerB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonA)
                    .addComponent(ButtonB))
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AnswerC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnswerD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonD)
                    .addComponent(ButtonC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goBack)
                    .addComponent(newQuestion))
                .addGap(44, 44, 44))
        );
		
		textFields();
        for (JTextField field : fields) {
            field.setEditable(false);
        }
        questionField.setEditable(false);
		
		rand = new Random();
		questionCtrl = new QuestionCtrl();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /** Generating new text fields
     * 
     */
    private void textFields() {
        fields = new ArrayDeque<>();
        fields.add(AnswerA);
        fields.add(AnswerB);
        fields.add(AnswerC);
        fields.add(AnswerD);
    }

    private void ButtonAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAActionPerformed
        Submit();
    }//GEN-LAST:event_ButtonAActionPerformed

    private void ButtonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCActionPerformed
        Submit();
    }//GEN-LAST:event_ButtonCActionPerformed

    private void ButtonBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBActionPerformed
        Submit();
    }//GEN-LAST:event_ButtonBActionPerformed

    private void ButtonDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDActionPerformed
        Submit();
    }//GEN-LAST:event_ButtonDActionPerformed
    /**
     * Opens the previous menu
     * @param evt 
     */
    private void goBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackActionPerformed
        startMenu = new StartMenu();
        this.setVisible(false);
        startMenu.setVisible(true);
        startMenu.setSize(getDimension());
    }//GEN-LAST:event_goBackActionPerformed
    /** Iterating over the text fields
     *  Checks if each field is holding the answers of the chosen question
     *  if the answer is true its text field color is set to green, red otherwise
     */
    private void Submit() {
        textFields(); // new text fields since they were removed by the newQuestion method 
        Iterator<JTextField> it = fields.iterator();
        while(it.hasNext()) {
           JTextField field = it.next();
            for (Answer ans : quest.getAnswers()) { //it takes the questiong which is now showing 
                if (field.getText().equals(ans.toString())) { // for each answer in the question it cheks if a field is holding that answer
                    if (!ans.getStatus()) {
                        field.setBackground(Color.red);
                    } else {
                        field.setBackground(Color.green);
                    }
                }
            }
            it.remove();
        }
    }
    /**
     * 
     * @return the size of the frame
     */
    private Dimension getDimension() {
        return this.getSize();
    }

/** Generating a random question from the collection and setting it as a current question
 *  Taking a clone version of the question answers so they do not get deleted 
 *  when removing them from the already set answers
 *  Randomly choosing the answers for each field
 * @param evt 
 */
    private void newQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newQuestionActionPerformed
        textFields();
        Iterator<JTextField> it = fields.iterator();
        int index = rand.nextInt(questionCtrl.getQuestions().size());
        Question question = questionCtrl.getQuestions().get(index);
        ArrayDeque<Answer> answers = (ArrayDeque<Answer>) question.getAnswers().clone();
        questionField.setText(question.toString());
        while (it.hasNext()) {
            JTextField field = it.next();
            int q = rand.nextInt(answers.size());
            field.setText(answers.poll().toString());
            field.setEditable(false);
            field.setBackground(Color.white);
            it.remove();
        }
        quest = question;
    }//GEN-LAST:event_newQuestionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AnswerA;
    private javax.swing.JTextField AnswerB;
    private javax.swing.JTextField AnswerC;
    private javax.swing.JTextField AnswerD;
    private javax.swing.JButton ButtonA;
    private javax.swing.JButton ButtonB;
    private javax.swing.JButton ButtonC;
    private javax.swing.JButton ButtonD;
    private javax.swing.JButton goBack;
    private javax.swing.JButton newQuestion;
    private javax.swing.JTextField questionField;
    // End of variables declaration//GEN-END:variables
}
